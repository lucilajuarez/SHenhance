pp_setversion('0.011');

pp_addpm({At=>Top},<<'EOD');

=head1 NAME

Photonic::ExtraUtils - Glue for utility Fortran routines

=head1 VERSION

version 0.011

=head1 COPYRIGHT NOTICE

Photonic - A perl package for calculations on photonics and
metamaterials.

Copyright (C) 1916 by W. Luis Mochán

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 1, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA  02110-1301 USA

    mochan@fis.unam.mx

    Instituto de Ciencias Físicas, UNAM
    Apartado Postal 48-3
    62251 Cuernavaca, Morelos
    México

=cut

=head1 SYNOPSIS

       use Photonic::ExtraUtils;

       dgtsl($c, $d, $e, $b, $info=PDL->null);
       cgtsl($c, $d, $e, $b, $info=PDL->null);


=head1 DESCRIPTION

Call some fortran routines from perl code.

=cut

EOD

pp_addpm(<<'END');

=head2 dgtsl

=for ref

Runs the LINPACK fortran routine DGTSL to solve a general tridiagonal
system of equations in double precission.

=for usage

       dgtsl($c, $d, $e, $b, $info=PDL->null);

where $c(1..$n-1) is the subdiagonal, $d(0..$n-1) the diagonal and
$e(0..$n-2) the supradiagonal of an $nX$n tridiagonal double precission
matrix. $b(0..$n-1) is the right hand side vector. $b is replaced by
the solution. $info returns 0 for success or k if the k-1-th element
of the diagonal became zero.


=head2 cgtsl

=for ref

Runs the LINPACK fortran routine CGTSL to solve a general complex tridiagonal
system of equations.

=for usage

       cgtsl($c, $d, $e, $b, $info=PDL->null);

where $c(2,1..$n-1) is the subdiagonal, $d(2,0..$n-1) the diagonal and
$e(2,0..$n-2) the supradiagonal of an $nX$n tridiagonal complex double precission
matrix. $b(2,0..$n-1) is the right hand side vector. $b is replaced by
the solution. $info returns 0 for success or k if the k-1-th element
of the diagonal became zero. Either 2Xn pdl's are used to represent
complex numbers, as in PDL::Complex.

=head2  set_boundscheck
=head2  set_debugging

=cut

END

use strict;
use warnings;
use Carp;
use ExtUtils::F77;
use PDL::Complex;

my $underscore=ExtUtils::F77->trail_? "_" : ""; #need fortran underscores?

pp_addhdr(qq{
	void dgtsl$underscore(int *N, double *c, double *d, double *e, double
		*b, int *info);
	void cgtsl$underscore(int *N, double *c, double *d, double *e, double
		*b, int *info);
});

pp_def('dgtsl',
       Pars=>'[phys] c(n); [phys] d(n); [phys] e(n); [phys] y(n); [o] b(n); int [o] info();',
       GenericTypes=>['D'],
       PMCode => q{
          sub PDL::dgtsl {
	      use Carp;
	      confess "Wrong number of arguments"
	       	      unless scalar(@_)==6 or scalar(@_)==4;
	      my ($c, $d, $e, $y, $b, $i)=@_;
	      $i=PDL->null unless defined $i;
	      map {
		  $_=$_->copy unless $_->is_inplace;
	          $_->set_inplace(0);
              }  ($c, $d, $e);
	      if($y->is_inplace){$b=$y}
	      elsif(not defined $b and not $y->is_inplace){
		  $b=$y->copy;
	      }elsif(defined $b and not $y->is_inplace){$b.=$y}
	      else {die "Weird";}
	      $y->set_inplace(0);
	      PDL::_dgtsl_int($c, $d, $e, $b, $b, $i);
	      return ($b, $i);
	      }
        },
       Code=> qq{
          int N=\$SIZE(n);
	  dgtsl$underscore(&N, \$P(c), \$P(d), \$P(e),\$P(b), \$P(info));
       },
    );
pp_def('cgtsl',
       Pars=>'[phys]c(2,n); [phys]d(2,n); [phys]e(2,n); [phys]y(2,n); [o] b(2,n); int [o] info();',
       GenericTypes=>['D'],
       PMCode => q{
          sub PDL::cgtsl {
	      use Carp;
	      use PDL::Complex;
	      confess "Wrong number of arguments"
	       	      unless scalar(@_)==6 or scalar(@_)==4;
	      my ($c, $d, $e, $y, $b, $i)=@_;
	      my $complex=$y->isa("PDL::Complex");
	      $i=PDL->null unless defined $i;
	      map {
		  $_=$_->copy unless $_->is_inplace;
	          $_->set_inplace(0);
              }  ($c, $d, $e);
	      if($y->is_inplace){$b=$y}
	      elsif(not defined $b and not $y->is_inplace){
		  $b=$y->copy;
	      }elsif(defined $b and not $y->is_inplace){$b.=$y}
	      else {die "Weird";}
	      PDL::_cgtsl_int($c, $d, $e, undef, $b, $i);
	      $y->is_inplace(0);
      	      return ($b->complex, $i) if $complex;
	      return ($b, $i) unless $complex;
	      }
        },
       Code=> qq{
          int N=\$SIZE(n);
	  /* parameter \$y is here unneeded */
          cgtsl$underscore(&N, \$P(c), \$P(d), \$P(e),\$P(b), \$P(info));
       },
    );
#pp_def('test',
#       Pars=>'a(); [o] b();',
# 	#       GenericTypes=>['D'],
#       PMCode => q{
#       	          sub PDL::test { #NOp
#		      my ($a)=@_;
#		      $b=PDL->null;
#		      PDL::_test_int($a, $b);
#		      return $b;
#	          }
#       },
#	 Code=> q{
#      	  $b()=2*$a();
#     },
# );

pp_done();

